name: plan
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      folder:
        required: true
        type: string

env:
  GCP_ENV: ${{ secrets.GCP_ENV }}
  GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
  GCP_CREDENTIALS: ${{ secrets.GCP_TERRAFORM_KEY }}

jobs:
  plan:
    name: Planning Terraform - ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ env.GCP_CREDENTIALS }}"

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ env.GCP_PROJECT }}

      - name: Enable APIs
        run: |-
          gcloud services enable iam.googleapis.com
          gcloud services enable recommender.googleapis.com
          gcloud services enable cloudresourcemanager.googleapis.com
          gcloud services enable containerregistry.googleapis.com
          gcloud services enable run.googleapis.com
          gcloud services enable dns.googleapis.com
          gcloud services enable compute.googleapis.com
          gcloud services enable cloudbuild.googleapis.com
          gcloud services enable cloudfunctions.googleapis.com
          gcloud services enable cloudscheduler.googleapis.com
          gcloud services enable pubsub.googleapis.com
          gcloud services enable appengine.googleapis.com
          gcloud services enable monitoring.googleapis.com
          gcloud services enable firestore.googleapis.com
          gcloud services enable secretmanager.googleapis.com
          echo "--------------------------------------------------------------"
          echo "Enabled API list:"
          echo "--------------------------------------------------------------"
          gcloud services list

      - name: Create Terraform State Bucket, enable Object versioning, Remove default.tflock if exist
        env:
          TF_FOLDER: ${{ inputs.folder }}
        run: |-
          gsutil mb -p ${{ env.GCP_PROJECT }} -b off -l asia-northeast1 gs://${{ env.GCP_PROJECT }}-${{ env.TF_FOLDER }}-tfstate-files/ || true
          gsutil versioning set on gs://${{ env.GCP_PROJECT }}-${{ env.TF_FOLDER }}-tfstate-files/
          gsutil rm gs://${{ env.GCP_PROJECT }}-${{ env.TF_FOLDER }}-tfstate-files/default.tflock || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.8

      - name: Terraform Init
        id: init
        env:
          TF_FOLDER: ${{ inputs.folder }}
        run: |
          cd ${{ env.TF_FOLDER }}
          terraform init -reconfigure -backend=true -backend-config="bucket=${{ env.GCP_PROJECT }}-${{ env.TF_FOLDER }}-tfstate-files" -backend-config="credentials=$GOOGLE_APPLICATION_CREDENTIALS"

      - name: Terraform Plan
        id: plan
        env:
          TF_FOLDER: ${{ inputs.folder }}
        run: |
          cd ${{ env.TF_FOLDER }}
          terraform plan -no-color
        continue-on-error: true

      - name: Check Plan Output Size
        id: check-plan
        run: |
          plan=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          EOF
          )
          argmax=$(getconf ARG_MAX)
          plansize=$(echo $plan | wc -c | xargs)
          echo "Plan size: $plansize"
          echo "ARGMAX: $argmax"
          if [[ $plansize -gt $argmax ]]; then
            message="Sorry! Plan output is too large! Please check the result at https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            echo "PLAN=$message" >> $GITHUB_ENV
          else
            echo "PLAN<<EOF" >> $GITHUB_ENV
            echo "${plan:0:65536}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
          
      - name: Post Terraform Plan Result
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = `${{ env.GCP_PROJECT }}`;
            const re = new RegExp(projectId, 'g')
            const planOutput = `
            #### ðŸ“– Terraform Plan Result for \`${projectId}\`: \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`
            ${{ env.PLAN }}
            \`\`\`
            </details>
            This plan result will be updated when the \`Terraform Plan\` workflow re-run.`;
            // Get the existing comments.
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            });
            // Find any comment already made by the bot.
            const botComments = comments.filter(comment => comment.user.id === 41898282);
            let isUpdated = false;
            for (botComment of botComments) {
              if (re.test(botComment.body)) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: planOutput
                });
                isUpdated = true;
              }
            }
            if (!isUpdated) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: planOutput
              })
            };

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
